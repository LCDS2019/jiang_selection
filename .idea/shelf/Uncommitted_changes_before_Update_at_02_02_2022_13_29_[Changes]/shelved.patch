Index: z21_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>##########################################################################################\nprint(''.ljust(81, '#'))\nprint('# PPGSI - USP/EACH 2022')\nprint('# Jiang_Selection')\nprint('# Version 2.0')\nprint('# Author: lcds2019')\nprint(''.ljust(81, '#'))\n\n##########################################################################################\n# libraries and modules\nimport os\nimport numpy as np\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfrom networkx.drawing.nx_pydot import graphviz_layout\n\nfrom datetime import datetime\nstart_time = datetime.now()\n\nimport z22_functions as z22\nimport z23_ontology as z23\nimport z24_measures as z24\nimport z25_ccsm as z25\nimport z26_nlp01 as z26\nimport z27_ngram as z27\nimport z28_nlp02 as z28\n\n##########################################################################################\n#Setup\n\nonto_path = './ontology/'\ndb_in = './db_in/'\ndb_out = './db_out/'\ndb_system = './db_system/'\n\nprint('')\n\n##########################################################################################\nprint(''.center(81, '#'))\nprint('#'+' Seleção de ontologias '.center(80, '#'))\nprint(''.center(81, '#'))\n\n#print('onto_path: '+ str(onto_path))\n\nontologia=z22.create_ontology_menu(onto_path)\n\nprint('')\n\n##########################################################################################\nprint(''.center(81, '#'))\nprint('#'+' Criação do Grafo de conceitos '.center(80, '#'))\nprint(''.center(81, '#'))\n\n#print('')\n#print('Dir: '+onto_path)\n#print('Ontologia selecionada: '+ontologia)\n\ndata,nodes=z23.load_ontology(db_system,onto_path,ontologia)\n\nprint('')\n\n##########################################################################################\nprint(''.center(81, '#'))\nprint('#'+' Seleção de arquivo disponíveis '.center(80, '#'))\nprint(''.center(81, '#'))\n\nprint('')\nprint('Dir: '+db_in)\ndados=z22.arquivos_disponiveis(db_in)\n#df_feature, df_description,filename_feature,filename_description\n\ndf_feature=dados[0]\nprint(df_feature.head(3))\n\ndf_description=dados[1]\nprint(df_description.head(3))\n\nfilename_feature=dados[2]\n#print(filename_feature)\n\nfilename_description=dados[3]\n#print(filename_description)\n\nprint('')\n\n##########################################################################################\nprint(''.center(81, '#'))\nprint('#'+' Criação de arquivos sintéticos '.center(80, '#'))\nprint(''.center(81, '#'))\n\nz22.apaga_arquivo_sintetico(db_in)\n\nnum_arquivos = 5 # quantidade de arquivos\ncolunas_arquivos = 20  # quantidade de colunas de saída\ncoluna_molecula = 'molecula'\ncoluna_alvo = 'IC50'\nfrac = 1  # fração do arquivo alvo\nfrac_aleatorio = 0 # 1-sim / 0-não - permite # diferente de linhas nos arquivos\nrepetition = 1 #1 - diferentes # de colunas / 2 - iguais # de colunas\n\nz22.arquivos_sinteticos(db_in,repetition,num_arquivos,df_feature,colunas_arquivos,frac,frac_aleatorio)\n\nprint('')\n\n##########################################################################################\nprint(''.center(81, '#'))\nprint('#'+' Medidas de similiaridade em processamento '.center(80, '#'))\nprint(''.center(81, '#'))\n\nprint('')\nprint('* - '+'sim_spath')\n\nz25.ccsm(data,nodes,db_system,ontologia)\n\nprint('')\n\n##########################################################################################\nprint(''.center(81, '#'))\nprint('#'+' NLP - Algoritmo 01 '.center(80, '#'))\nprint(' NLP ”extract terms through NLP” & ”compute similarity score” '.center(81, '#'))\nprint(''.center(81, '#'))\n\npath_descriptions = str(filename_description)\n\nprint(''.center(80, '-'))\nprint(' Datasets disponíveis para seleção '.center(80, '-'))\nprint(' path_descriptions '.center(80, '-'))\nprint(''.center(80, '-'))\nprint('')\n\nprint(path_descriptions)\n\n#####################################################\nprint(80 * '-')\n\nprint('Stopwords:')\nenglish_stops=z26.english_stops()\n\nprint('Punctuations:')\npunctuations=z26.punctuations()\n\nprint(80 * '-')\n#####################################################\n\npath = db_in\narr = os.listdir(path)\n\nlista = [arq for arq in arr if (arq.startswith(\"zarq_\"))]\nlista.sort(reverse=False)\n\nprint('')\n\ntry:\n    descriptions = pd.read_csv(path_descriptions, sep='|')\n    print(\"Arquivo de descrições localizado!\")\nexcept:\n    print(\"Arquivo de descrições não localizado!\")\n\n\nprint(80 * '-')\n\ngraph=nx.Graph()\ngraph.add_node('root')\n\nprint('')\nfor zarq_i in lista:\n    graph.add_edge('root',zarq_i.split('.')[0])\n    print(zarq_i)\n\nplt.clf()\nnx.draw(graph, with_labels=True, node_size=0.5,verticalalignment='bottom')\nplt.savefig('./db_out/graph_datasets.png', dpi=300)\n\nprint('')\nprint(80 * '-')\n\nfor zarq_i in lista:\n\n    print(''.center(80, '*'))\n    print('Arquivo zarq: '+zarq_i)\n\n    zarq = pd.read_csv(db_in+zarq_i, sep='|')\n\n    l=[]\n    for i in zarq.columns:\n        l.append(i)\n\n    df = pd.DataFrame(l, columns=['Atribute'])\n\n    dfl=pd.merge(df, descriptions, on=['Atribute'], how='left')\n    #print(dfl)\n\n    M = []\n    lista_n_grams = []\n\n    for index, row in dfl.iterrows() :\n        #print(''.center(40, '*'))\n        atributo=str(row[0])\n        #print('Atributo: '+ str(atributo))\n\n        row=str(row[1])\n        #print('Descrição: '+str(row))\n\n        # ngram ****************************************************************\n        # n = 5\n\n        td_gram=z27.get_ngrams_01(row)\n\n        td = z26.tokenize_descriptions(index, atributo, row, english_stops, punctuations)\n        #print('Td: '+str(td))\n\n        for i in td:\n            lista_n_grams.append(i)\n\n        for i in td_gram:\n            lista_n_grams.append(i)\n\n        #print(''.center(40, '*'))\n\n    #print(zarq_i.split('.')[0],td)\n    print('TD:'+str(lista_n_grams))\n    TD=lista_n_grams\n\n\n    vlist=z28.td_similarity_scores(zarq_i,data, TD)\n\n    for i in vlist:\n        print(i)\n        #print(i[0])\n        #print(i[1])\n        #print(i[2])\n\n        graph.add_weighted_edges_from([(i[0], i[1], i[2])])\n\n    print(''.center(80, '*'))\n\n\n\npos = graphviz_layout(graph, prog=\"dot\")\nnx.draw(graph, pos,with_labels=True)\nplt.show()\n\nprint('')\n\nprint(''.ljust(81, '#'))\n\nprint('')\n'''\n##########################################################################################\nprint(''.ljust(81, '#'))\nprint('#'+' NLP - Algoritmo 02 '.ljust(80, '#'))\nprint(''.ljust(81, '#'))\n\nprint('')\n\n##########################################################################################\nprint(''.ljust(81, '#'))\nprint('#'+' NLP - Algoritmo 03 '.ljust(80, '#'))\nprint(''.ljust(81, '#'))\n\nprint('')\n\n##########################################################################################\nprint(''.ljust(81, '#'))\nprint('#'+' Apresentação do ranking '.ljust(80, '#'))\nprint(''.ljust(81, '#'))\n\nprint('')\n\n##########################################################################################\nprint(''.ljust(81, '#'))\nprint('#'+' Registro de estatísticas '.ljust(80, '#'))\nprint(''.ljust(81, '#'))\n\n\n\nprint('')\n'''\n##########################################################################################\nprint(''.ljust(81, '-'))\n\nend_time = datetime.now()\nprint('Duration: {}'.format(end_time - start_time))\n\nprint('#'+' End '.center(80, '#'))\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/z21_main.py b/z21_main.py
--- a/z21_main.py	(revision b8bf3a94bf459273a21695af43e372811fd6974a)
+++ b/z21_main.py	(date 1643819349528)
@@ -91,7 +91,7 @@
 
 z22.apaga_arquivo_sintetico(db_in)
 
-num_arquivos = 5 # quantidade de arquivos
+num_arquivos = 8 # quantidade de arquivos
 colunas_arquivos = 20  # quantidade de colunas de saída
 coluna_molecula = 'molecula'
 coluna_alvo = 'IC50'
